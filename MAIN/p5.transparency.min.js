!function(e){class r{constructor(e){this.queues=[[]],this.drawingItem=0,this.renderer=e}pushQueue(){this.queues.push([])}popQueue(){this.queues.pop()}flushQueue(){let e=this.queues[this.queues.length-1];if(0!==e.length)for(e.sort((e,r)=>e.z-r.z);e.length>0&&e[0].drawingItem>=this.drawingItem;)this.drawOrderedItem(e.shift())}hitFlushBoundary(){this.flushQueue()}drawOrderedItem(e){this.pushQueue(),this.drawingItem++;let r=()=>{this.renderer._pInst.push();let r=this.renderer.states||this.renderer;if(this.renderer.states){for(let t in e.currentState)r.setValue(t,e.currentState[t]);e.uModelMatrix&&r.setValue("uModelMatrix",e.uModelMatrix.copy()),e.uViewMatrix&&r.setValue("uViewMatrix",e.uViewMatrix.copy()),e.uMVMatrix&&r.setValue("uMVMatrix",e.uMVMatrix.copy()),e.uPMatrix&&r.setValue("uPMatrix",e.uPMatrix.copy())}else{for(let t in e.currentState)r[t]=e.currentState[t],e.currentState[t]instanceof Array&&(r[t]=r[t].slice());e.uModelMatrix&&(r.uModelMatrix=e.uModelMatrix.copy()),e.uViewMatrix&&(r.uViewMatrix=e.uViewMatrix.copy()),e.uMVMatrix&&(r.uMVMatrix=e.uMVMatrix.copy()),e.uPMatrix&&(r.uPMatrix=e.uPMatrix.copy())}e.run(),this.renderer._pInst.pop()};e.twoSided?(this.renderer.drawingContext.enable(this.renderer.drawingContext.CULL_FACE),this.renderer.drawingContext.cullFace(this.renderer.drawingContext.BACK),r(),this.renderer.drawingContext.enable(this.renderer.drawingContext.CULL_FACE),this.renderer.drawingContext.cullFace(this.renderer.drawingContext.FRONT),r(),this.renderer.drawingContext.disable(this.renderer.drawingContext.CULL_FACE)):r(),this.drawingItem--,this.flushQueue(),this.popQueue()}drawTransparent(r,{twoSided:t}={}){let n,i,a,s;let o=this.renderer.states||this.renderer;this.renderer.states?n={...this.renderer.states}:(n=this.renderer.push(),this.renderer.pop(n),n={...n.properties}),o.uModelMatrix?(i=o.uModelMatrix.copy(),a=o.uViewMatrix.copy(),s=i.copy().mult(a)):s=o.uMVMatrix.copy();let p=o.uPMatrix.copy(),u=s.multiplyPoint(new e.Vector(0,0,0)),d={drawingItem:this.drawingItem,run:r,z:u.z,uModelMatrix:i,uViewMatrix:a,uMVMatrix:s,uPMatrix:p,twoSided:t,currentState:n};this.queues[this.queues.length-1].push(d)}}for(let{method:r,onClass:t,after:n,condition:i}of[{method:"end",onClass:e.Framebuffer},{method:"loadPixels",onClass:e.Framebuffer},{method:"get",onClass:e.Framebuffer},{method:"loadPixels",onClass:e},{method:"get",onClass:e},{method:"redraw",onClass:e,after:!0},{method:"_clearClip",onClass:e.RendererGL}]){let e=t.prototype[r];t.prototype[r]=function(...r){if(i&&i(this))return e.apply(this,r);n||this.transparencyManager().hitFlushBoundary();let t=e.apply(this,r);return n&&(t instanceof Promise?t=t.then(e=>(this.transparencyManager().hitFlushBoundary(),e)):this.transparencyManager().hitFlushBoundary()),t}}e.prototype.transparencyManager=function(){return this._renderer.transparencyManager()},e.Renderer.prototype.transparencyManager=function(){return this._transparencyManager||(this._transparencyManager=new r(this)),this._transparencyManager},e.Framebuffer.prototype.transparencyManager=function(){return(this.target?this.target._renderer:this.renderer).transparencyManager()},e.Camera.prototype.transparencyManager=function(){return this._renderer.transparencyManager()};let t=e.Shader;e.Shader=class extends t{constructor(e,r,t,...n){super(e,r,t.includes("uniform bool isClipping")?t:t.replace(/(OUT_COLOR|gl_FragColor)\s*=\s*([^;]|\n)+;/m,"$& if (!isClipping && $1.a <= 0.) discard;").replace("void main","uniform bool isClipping;\nvoid main"),...n)}};let n=e.RendererGL.prototype.beginClip;e.RendererGL.prototype.beginClip=function(e){this._drawingClipMask=!0,n.call(this,e)};let i=e.RendererGL.prototype.endClip;if(e.RendererGL.prototype.endClip=function(){this._drawingClipMask=!1,i.call(this)},e.Shader.prototype._setMatrixUniforms){let r=e.Shader.prototype._setMatrixUniforms;e.Shader.prototype._setMatrixUniforms=function(){this.setUniform("isClipping",!!this._renderer._drawingClipMask),r.call(this)}}if(e.RendererGL.prototype._setGlobalUniforms){let r=e.Shader.prototype._setGlobalUniforms;e.Shader.prototype._setGlobalUniforms=function(e){this.setUniform("isClipping",this.drawTarget()._isClipApplied),r.call(this,e)}}e.prototype.drawTransparent=function(e){this.transparencyManager().drawTransparent(e)},e.prototype.drawTwoSided=function(e){this.transparencyManager().drawTransparent(e,{twoSided:!0})}}(p5);
